/*
 * Copyright 2013 Modeliosoft
 *
 * This file is part of Modelio.
 *
 * Modelio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Modelio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Modelio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */  
                                    

package org.modelio.gproject.module.catalog;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.modeliosoft.modelio.javadesigner.annotations.objid;
import org.modelio.gproject.module.IModuleHandle;
import org.modelio.gproject.module.ModuleId;
import org.modelio.vbasic.version.Version;

/**
 * Module handle generated by {@link FileModuleStore}.
 */
@objid ("2c9748eb-f37d-11e1-a3c7-002564c97630")
class FileCatalogModuleHandle implements IModuleHandle, Comparable {
    @objid ("6949ebe8-f37d-11e1-a3c7-002564c97630")
    private String name;

    @objid ("6949ebee-f37d-11e1-a3c7-002564c97630")
    private String uid;

    @objid ("6949ebf3-f37d-11e1-a3c7-002564c97630")
    private String mainClassName;

    @objid ("2c9748ee-f37d-11e1-a3c7-002564c97630")
    private Version version;

    @objid ("2c9748f2-f37d-11e1-a3c7-002564c97630")
    private Version binaryVersion;

    @objid ("2c9748f3-f37d-11e1-a3c7-002564c97630")
    private List<ModuleId> dependencies = new ArrayList<>();

    @objid ("2c9748f6-f37d-11e1-a3c7-002564c97630")
    private List<ModuleId> weakDependencies = new ArrayList<>();

    @objid ("87d0d26c-54be-4f44-ab34-445b958d6edd")
    private Path moduleCachePath;

    @objid ("afc4f3e1-1013-4515-a60c-6c2c6c97af8e")
    private List<Path> docPaths = new ArrayList<>();

    @objid ("644259c1-1d90-466c-9984-b49819fb608b")
    private List<Path> jarPaths = new ArrayList<>();

    @objid ("ed00681d-baa6-4572-a81e-f474faadda7f")
    private Map<String, Path> stylePaths = new HashMap<String, Path>();

    @objid ("2c9748ff-f37d-11e1-a3c7-002564c97630")
    FileCatalogModuleHandle(Path moduleCachePath, String name, Version version, String uid, String mainClassName, Version binaryVersion, List<ModuleId> dependencies, List<ModuleId> weakDependencies, List<Path> docPaths, List<Path> jarPaths, Map<String, Path> stylePaths) {
        this.moduleCachePath = moduleCachePath;
        this.name = name;
        this.version = version;
        this.uid = uid;
        this.mainClassName = mainClassName;
               
        this.binaryVersion = binaryVersion;
        this.dependencies = dependencies;
        this.weakDependencies = weakDependencies;
        this.docPaths = docPaths;
        this.jarPaths = jarPaths;
        this.stylePaths = stylePaths;
    }

    @objid ("2c974914-f37d-11e1-a3c7-002564c97630")
    @Override
    public String getName() {
        return this.name;
    }

    @objid ("2c98cf80-f37d-11e1-a3c7-002564c97630")
    @Override
    public Version getVersion() {
        return this.version;
    }

    @objid ("2c98cf85-f37d-11e1-a3c7-002564c97630")
    @Override
    public Path getModuleInfosPath() {
        return this.moduleCachePath.resolve("moduleInfos.xml");
    }

    @objid ("2c98cf8a-f37d-11e1-a3c7-002564c97630")
    @Override
    public Path getModelComponentPath() {
        return this.moduleCachePath.resolve("staticModel.ramc");
    }

    @objid ("2c98cf8f-f37d-11e1-a3c7-002564c97630")
    @Override
    public Path getDynamicModelPath() {
        return this.moduleCachePath.resolve("dynamicModel.xml");
    }

    @objid ("2c98cf94-f37d-11e1-a3c7-002564c97630")
    @Override
    public Path getResourcePath() {
        return this.moduleCachePath;
    }

    @objid ("2c98cf99-f37d-11e1-a3c7-002564c97630")
    @Override
    public List<Path> getJarPaths() {
        return this.jarPaths;
    }

    @objid ("2c98cfa0-f37d-11e1-a3c7-002564c97630")
    @Override
    public List<Path> getDocPaths() {
        return this.docPaths;
    }

    @objid ("2c98cfa7-f37d-11e1-a3c7-002564c97630")
    @Override
    public String getUid() {
        return this.uid;
    }

    @objid ("2c98cfac-f37d-11e1-a3c7-002564c97630")
    @Override
    public String getMainClassName() {
        return this.mainClassName;
    }

    @objid ("2c98cfb6-f37d-11e1-a3c7-002564c97630")
    @Override
    public Version getBinaryVersion() {
        return this.binaryVersion;
    }

    @objid ("2c9a561e-f37d-11e1-a3c7-002564c97630")
    @Override
    public List<ModuleId> getDependencies() {
        return this.dependencies;
    }

    @objid ("2c9a5625-f37d-11e1-a3c7-002564c97630")
    @Override
    public List<ModuleId> getWeakDependencies() {
        return this.weakDependencies;
    }

    @objid ("d95db795-37da-11e2-8ba4-002564c97630")
    @Override
    public Path getArchive() {
        int buildVersion = this.version.getBuildVersion();
        String archiveName = this.name + "_" + this.version.getMajorVersion() + "." + this.version.getMinorVersion() + "." + (buildVersion < 10 ? "0" + buildVersion : buildVersion) + ".jmdac";
        return this.moduleCachePath.resolve(archiveName);
    }

    /**
     * Get the root path where all module files are extracted or created.
     * <p>
     * This directory can be copied then a new handle can be created on the directory copy.
     * @return the module root path.
     */
    @objid ("44c6c46d-615b-470e-bead-2176e0d438fb")
    public Path getModuleCachePath() {
        return this.moduleCachePath;
    }

    @objid ("5bd6b81b-362f-4711-acb2-7c49c078a8c1")
    @Override
    public String toString() {
        return getClass().getSimpleName()+"("+getName()+" v"+getVersion()+" @"+getModuleCachePath()+")";
    }

    @objid ("78e65118-bf63-4eb4-8796-c9393fa858b8")
    @Override
    public int compareTo(Object obj) {
        if(obj instanceof String){
            return this.name.toString().compareTo((String)obj);
        
        }else if(obj instanceof FileCatalogModuleHandle){
            return this.version.toString().compareTo(((FileCatalogModuleHandle)obj).version.toString());
        }
        return 0;
    }

    @objid ("293c3919-1a3f-44de-9e6c-29bd6cc4e62c")
    @Override
    public Map<String, Path> getStylePaths() {
        return this.stylePaths ;
    }

}
